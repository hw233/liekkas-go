// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectResp, error)
	Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error)
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseResp, error)
	NewGroupMailNotify(ctx context.Context, in *NewGroupMailReq, opts ...grpc.CallOption) (*NewGroupMailResp, error)
	NewPersonalMailNotify(ctx context.Context, in *NewPersonalMailReq, opts ...grpc.CallOption) (*NewPersonalMailResp, error)
	ReloadWhiteList(ctx context.Context, in *ReloadWhiteListReq, opts ...grpc.CallOption) (*ReloadWhiteListResp, error)
	ReloadMaintain(ctx context.Context, in *ReloadMaintainReq, opts ...grpc.CallOption) (*ReloadMaintainResp, error)
	ReloadAnnouncement(ctx context.Context, in *ReloadAnnouncementReq, opts ...grpc.CallOption) (*ReloadAnnouncementResp, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectResp, error) {
	out := new(ConnectResp)
	err := c.cc.Invoke(ctx, "/Game/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error) {
	out := new(TransferResp)
	err := c.cc.Invoke(ctx, "/Game/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseResp, error) {
	out := new(CloseResp)
	err := c.cc.Invoke(ctx, "/Game/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NewGroupMailNotify(ctx context.Context, in *NewGroupMailReq, opts ...grpc.CallOption) (*NewGroupMailResp, error) {
	out := new(NewGroupMailResp)
	err := c.cc.Invoke(ctx, "/Game/NewGroupMailNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) NewPersonalMailNotify(ctx context.Context, in *NewPersonalMailReq, opts ...grpc.CallOption) (*NewPersonalMailResp, error) {
	out := new(NewPersonalMailResp)
	err := c.cc.Invoke(ctx, "/Game/NewPersonalMailNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ReloadWhiteList(ctx context.Context, in *ReloadWhiteListReq, opts ...grpc.CallOption) (*ReloadWhiteListResp, error) {
	out := new(ReloadWhiteListResp)
	err := c.cc.Invoke(ctx, "/Game/ReloadWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ReloadMaintain(ctx context.Context, in *ReloadMaintainReq, opts ...grpc.CallOption) (*ReloadMaintainResp, error) {
	out := new(ReloadMaintainResp)
	err := c.cc.Invoke(ctx, "/Game/ReloadMaintain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ReloadAnnouncement(ctx context.Context, in *ReloadAnnouncementReq, opts ...grpc.CallOption) (*ReloadAnnouncementResp, error) {
	out := new(ReloadAnnouncementResp)
	err := c.cc.Invoke(ctx, "/Game/ReloadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	Connect(context.Context, *ConnectReq) (*ConnectResp, error)
	Transfer(context.Context, *TransferReq) (*TransferResp, error)
	Close(context.Context, *CloseReq) (*CloseResp, error)
	NewGroupMailNotify(context.Context, *NewGroupMailReq) (*NewGroupMailResp, error)
	NewPersonalMailNotify(context.Context, *NewPersonalMailReq) (*NewPersonalMailResp, error)
	ReloadWhiteList(context.Context, *ReloadWhiteListReq) (*ReloadWhiteListResp, error)
	ReloadMaintain(context.Context, *ReloadMaintainReq) (*ReloadMaintainResp, error)
	ReloadAnnouncement(context.Context, *ReloadAnnouncementReq) (*ReloadAnnouncementResp, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) Connect(context.Context, *ConnectReq) (*ConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGameServer) Transfer(context.Context, *TransferReq) (*TransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedGameServer) Close(context.Context, *CloseReq) (*CloseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedGameServer) NewGroupMailNotify(context.Context, *NewGroupMailReq) (*NewGroupMailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGroupMailNotify not implemented")
}
func (UnimplementedGameServer) NewPersonalMailNotify(context.Context, *NewPersonalMailReq) (*NewPersonalMailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPersonalMailNotify not implemented")
}
func (UnimplementedGameServer) ReloadWhiteList(context.Context, *ReloadWhiteListReq) (*ReloadWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadWhiteList not implemented")
}
func (UnimplementedGameServer) ReloadMaintain(context.Context, *ReloadMaintainReq) (*ReloadMaintainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadMaintain not implemented")
}
func (UnimplementedGameServer) ReloadAnnouncement(context.Context, *ReloadAnnouncementReq) (*ReloadAnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAnnouncement not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Connect(ctx, req.(*ConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Transfer(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NewGroupMailNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGroupMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NewGroupMailNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NewGroupMailNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NewGroupMailNotify(ctx, req.(*NewGroupMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_NewPersonalMailNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPersonalMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).NewPersonalMailNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/NewPersonalMailNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).NewPersonalMailNotify(ctx, req.(*NewPersonalMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ReloadWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ReloadWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ReloadWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ReloadWhiteList(ctx, req.(*ReloadWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ReloadMaintain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadMaintainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ReloadMaintain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ReloadMaintain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ReloadMaintain(ctx, req.(*ReloadMaintainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ReloadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadAnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ReloadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/ReloadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ReloadAnnouncement(ctx, req.(*ReloadAnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Game_Connect_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Game_Transfer_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Game_Close_Handler,
		},
		{
			MethodName: "NewGroupMailNotify",
			Handler:    _Game_NewGroupMailNotify_Handler,
		},
		{
			MethodName: "NewPersonalMailNotify",
			Handler:    _Game_NewPersonalMailNotify_Handler,
		},
		{
			MethodName: "ReloadWhiteList",
			Handler:    _Game_ReloadWhiteList_Handler,
		},
		{
			MethodName: "ReloadMaintain",
			Handler:    _Game_ReloadMaintain_Handler,
		},
		{
			MethodName: "ReloadAnnouncement",
			Handler:    _Game_ReloadAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/protobuf/proto/game_service.proto",
}
