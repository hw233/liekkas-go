// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuildClient is the client API for Guild service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuildClient interface {
	ShowInfo(ctx context.Context, in *GuildShowInfoReq, opts ...grpc.CallOption) (*GuildShowInfoResp, error)
	Info(ctx context.Context, in *GuildInfoReq, opts ...grpc.CallOption) (*GuildInfoResp, error)
	Create(ctx context.Context, in *GuildCreateReq, opts ...grpc.CallOption) (*GuildCreateResp, error)
	Dissolve(ctx context.Context, in *GuildDissolveReq, opts ...grpc.CallOption) (*GuildDissolveResp, error)
	CancelDissolve(ctx context.Context, in *GuildCancelDissolveReq, opts ...grpc.CallOption) (*GuildCancelDissolveResp, error)
	Apply(ctx context.Context, in *GuildApplyReq, opts ...grpc.CallOption) (*GuildApplyResp, error)
	HandleApplied(ctx context.Context, in *GuildHandleAppliedReq, opts ...grpc.CallOption) (*GuildHandleAppliedResp, error)
	CancelApply(ctx context.Context, in *GuildCancelApplyReq, opts ...grpc.CallOption) (*GuildCancelApplyResp, error)
	Quit(ctx context.Context, in *GuildQuitReq, opts ...grpc.CallOption) (*GuildQuitResp, error)
	Kick(ctx context.Context, in *GuildKickReq, opts ...grpc.CallOption) (*GuildKickResp, error)
	Chat(ctx context.Context, in *GuildChatReq, opts ...grpc.CallOption) (*GuildChatResp, error)
	Promotion(ctx context.Context, in *GuildPromotionReq, opts ...grpc.CallOption) (*GuildPromotionResp, error)
	Demotion(ctx context.Context, in *GuildDemotionReq, opts ...grpc.CallOption) (*GuildDemotionResp, error)
	Transfer(ctx context.Context, in *GuildTransferReq, opts ...grpc.CallOption) (*GuildTransferResp, error)
	Recommend(ctx context.Context, in *GuildRecommendReq, opts ...grpc.CallOption) (*GuildRecommendResp, error)
	IsDissolved(ctx context.Context, in *GuildIsDissolvedReq, opts ...grpc.CallOption) (*GuildIsDissolvedResp, error)
	Sync(ctx context.Context, in *GuildSyncReq, opts ...grpc.CallOption) (*GuildSyncResp, error)
	CoBuildGetInfo(ctx context.Context, in *GuildCoBuildGetInfoReq, opts ...grpc.CallOption) (*GuildCoBuildGetInfoResp, error)
	CoBuildImprove(ctx context.Context, in *GuildCoBuildImproveReq, opts ...grpc.CallOption) (*GuildCoBuildImproveResp, error)
	CoBuildUse(ctx context.Context, in *GuildCoBuildUseReq, opts ...grpc.CallOption) (*GuildCoBuildUseResp, error)
	Members(ctx context.Context, in *GuildMembersReq, opts ...grpc.CallOption) (*GuildMembersResp, error)
	GetDispatchCharac(ctx context.Context, in *GuildGetDispatchCharacReq, opts ...grpc.CallOption) (*GuildGetDispatchCharacResp, error)
	AddGreetings(ctx context.Context, in *GuildAddGreetingsReq, opts ...grpc.CallOption) (*GuildAddGreetingsResp, error)
	GetGreetings(ctx context.Context, in *GuildGetGreetingsReq, opts ...grpc.CallOption) (*GuildGetGreetingsResp, error)
	UpdateGreetingsRecord(ctx context.Context, in *GuildUpdateGreetingsReq, opts ...grpc.CallOption) (*GuildUpdateGreetingsResp, error)
	GetGraveyardRequests(ctx context.Context, in *GuildGetGraveyardRequestsReq, opts ...grpc.CallOption) (*GuildGetGraveyardRequestsResp, error)
	AddGraveyardRequest(ctx context.Context, in *GuildAddGraveyardRequestReq, opts ...grpc.CallOption) (*GuildAddGraveyardRequestResp, error)
	HelpRequestsHandle(ctx context.Context, in *GuildHelpRequestsHandleReq, opts ...grpc.CallOption) (*GuildHelpRequestsHandleResp, error)
	GetElites(ctx context.Context, in *GuildGetElitesReq, opts ...grpc.CallOption) (*GuildGetElitesResp, error)
	RecommendInfo(ctx context.Context, in *GuildRecommendInfoReq, opts ...grpc.CallOption) (*GuildRecommendInfoResp, error)
	GetTaskList(ctx context.Context, in *GuildTaskListReq, opts ...grpc.CallOption) (*GuildTaskListResp, error)
	TaskRewards(ctx context.Context, in *GuildTaskRewardsReq, opts ...grpc.CallOption) (*GuildTaskRewardsResp, error)
	TaskAddProgress(ctx context.Context, in *GuildTaskAddProgressReq, opts ...grpc.CallOption) (*GuildTaskAddProgressResp, error)
	SendGroupMail(ctx context.Context, in *GuildSendGroupMailReq, opts ...grpc.CallOption) (*GuildSendGroupMailResp, error)
	GetApplyList(ctx context.Context, in *GuildGetApplyListReq, opts ...grpc.CallOption) (*GuildGetApplyListResp, error)
	Modify(ctx context.Context, in *GuildModifyReq, opts ...grpc.CallOption) (*GuildModifyResp, error)
}

type guildClient struct {
	cc grpc.ClientConnInterface
}

func NewGuildClient(cc grpc.ClientConnInterface) GuildClient {
	return &guildClient{cc}
}

func (c *guildClient) ShowInfo(ctx context.Context, in *GuildShowInfoReq, opts ...grpc.CallOption) (*GuildShowInfoResp, error) {
	out := new(GuildShowInfoResp)
	err := c.cc.Invoke(ctx, "/Guild/ShowInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Info(ctx context.Context, in *GuildInfoReq, opts ...grpc.CallOption) (*GuildInfoResp, error) {
	out := new(GuildInfoResp)
	err := c.cc.Invoke(ctx, "/Guild/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Create(ctx context.Context, in *GuildCreateReq, opts ...grpc.CallOption) (*GuildCreateResp, error) {
	out := new(GuildCreateResp)
	err := c.cc.Invoke(ctx, "/Guild/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Dissolve(ctx context.Context, in *GuildDissolveReq, opts ...grpc.CallOption) (*GuildDissolveResp, error) {
	out := new(GuildDissolveResp)
	err := c.cc.Invoke(ctx, "/Guild/Dissolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) CancelDissolve(ctx context.Context, in *GuildCancelDissolveReq, opts ...grpc.CallOption) (*GuildCancelDissolveResp, error) {
	out := new(GuildCancelDissolveResp)
	err := c.cc.Invoke(ctx, "/Guild/CancelDissolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Apply(ctx context.Context, in *GuildApplyReq, opts ...grpc.CallOption) (*GuildApplyResp, error) {
	out := new(GuildApplyResp)
	err := c.cc.Invoke(ctx, "/Guild/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) HandleApplied(ctx context.Context, in *GuildHandleAppliedReq, opts ...grpc.CallOption) (*GuildHandleAppliedResp, error) {
	out := new(GuildHandleAppliedResp)
	err := c.cc.Invoke(ctx, "/Guild/HandleApplied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) CancelApply(ctx context.Context, in *GuildCancelApplyReq, opts ...grpc.CallOption) (*GuildCancelApplyResp, error) {
	out := new(GuildCancelApplyResp)
	err := c.cc.Invoke(ctx, "/Guild/CancelApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Quit(ctx context.Context, in *GuildQuitReq, opts ...grpc.CallOption) (*GuildQuitResp, error) {
	out := new(GuildQuitResp)
	err := c.cc.Invoke(ctx, "/Guild/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Kick(ctx context.Context, in *GuildKickReq, opts ...grpc.CallOption) (*GuildKickResp, error) {
	out := new(GuildKickResp)
	err := c.cc.Invoke(ctx, "/Guild/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Chat(ctx context.Context, in *GuildChatReq, opts ...grpc.CallOption) (*GuildChatResp, error) {
	out := new(GuildChatResp)
	err := c.cc.Invoke(ctx, "/Guild/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Promotion(ctx context.Context, in *GuildPromotionReq, opts ...grpc.CallOption) (*GuildPromotionResp, error) {
	out := new(GuildPromotionResp)
	err := c.cc.Invoke(ctx, "/Guild/Promotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Demotion(ctx context.Context, in *GuildDemotionReq, opts ...grpc.CallOption) (*GuildDemotionResp, error) {
	out := new(GuildDemotionResp)
	err := c.cc.Invoke(ctx, "/Guild/Demotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Transfer(ctx context.Context, in *GuildTransferReq, opts ...grpc.CallOption) (*GuildTransferResp, error) {
	out := new(GuildTransferResp)
	err := c.cc.Invoke(ctx, "/Guild/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Recommend(ctx context.Context, in *GuildRecommendReq, opts ...grpc.CallOption) (*GuildRecommendResp, error) {
	out := new(GuildRecommendResp)
	err := c.cc.Invoke(ctx, "/Guild/Recommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) IsDissolved(ctx context.Context, in *GuildIsDissolvedReq, opts ...grpc.CallOption) (*GuildIsDissolvedResp, error) {
	out := new(GuildIsDissolvedResp)
	err := c.cc.Invoke(ctx, "/Guild/IsDissolved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Sync(ctx context.Context, in *GuildSyncReq, opts ...grpc.CallOption) (*GuildSyncResp, error) {
	out := new(GuildSyncResp)
	err := c.cc.Invoke(ctx, "/Guild/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) CoBuildGetInfo(ctx context.Context, in *GuildCoBuildGetInfoReq, opts ...grpc.CallOption) (*GuildCoBuildGetInfoResp, error) {
	out := new(GuildCoBuildGetInfoResp)
	err := c.cc.Invoke(ctx, "/Guild/CoBuildGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) CoBuildImprove(ctx context.Context, in *GuildCoBuildImproveReq, opts ...grpc.CallOption) (*GuildCoBuildImproveResp, error) {
	out := new(GuildCoBuildImproveResp)
	err := c.cc.Invoke(ctx, "/Guild/CoBuildImprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) CoBuildUse(ctx context.Context, in *GuildCoBuildUseReq, opts ...grpc.CallOption) (*GuildCoBuildUseResp, error) {
	out := new(GuildCoBuildUseResp)
	err := c.cc.Invoke(ctx, "/Guild/CoBuildUse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Members(ctx context.Context, in *GuildMembersReq, opts ...grpc.CallOption) (*GuildMembersResp, error) {
	out := new(GuildMembersResp)
	err := c.cc.Invoke(ctx, "/Guild/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) GetDispatchCharac(ctx context.Context, in *GuildGetDispatchCharacReq, opts ...grpc.CallOption) (*GuildGetDispatchCharacResp, error) {
	out := new(GuildGetDispatchCharacResp)
	err := c.cc.Invoke(ctx, "/Guild/GetDispatchCharac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) AddGreetings(ctx context.Context, in *GuildAddGreetingsReq, opts ...grpc.CallOption) (*GuildAddGreetingsResp, error) {
	out := new(GuildAddGreetingsResp)
	err := c.cc.Invoke(ctx, "/Guild/AddGreetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) GetGreetings(ctx context.Context, in *GuildGetGreetingsReq, opts ...grpc.CallOption) (*GuildGetGreetingsResp, error) {
	out := new(GuildGetGreetingsResp)
	err := c.cc.Invoke(ctx, "/Guild/GetGreetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) UpdateGreetingsRecord(ctx context.Context, in *GuildUpdateGreetingsReq, opts ...grpc.CallOption) (*GuildUpdateGreetingsResp, error) {
	out := new(GuildUpdateGreetingsResp)
	err := c.cc.Invoke(ctx, "/Guild/UpdateGreetingsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) GetGraveyardRequests(ctx context.Context, in *GuildGetGraveyardRequestsReq, opts ...grpc.CallOption) (*GuildGetGraveyardRequestsResp, error) {
	out := new(GuildGetGraveyardRequestsResp)
	err := c.cc.Invoke(ctx, "/Guild/GetGraveyardRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) AddGraveyardRequest(ctx context.Context, in *GuildAddGraveyardRequestReq, opts ...grpc.CallOption) (*GuildAddGraveyardRequestResp, error) {
	out := new(GuildAddGraveyardRequestResp)
	err := c.cc.Invoke(ctx, "/Guild/AddGraveyardRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) HelpRequestsHandle(ctx context.Context, in *GuildHelpRequestsHandleReq, opts ...grpc.CallOption) (*GuildHelpRequestsHandleResp, error) {
	out := new(GuildHelpRequestsHandleResp)
	err := c.cc.Invoke(ctx, "/Guild/HelpRequestsHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) GetElites(ctx context.Context, in *GuildGetElitesReq, opts ...grpc.CallOption) (*GuildGetElitesResp, error) {
	out := new(GuildGetElitesResp)
	err := c.cc.Invoke(ctx, "/Guild/GetElites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) RecommendInfo(ctx context.Context, in *GuildRecommendInfoReq, opts ...grpc.CallOption) (*GuildRecommendInfoResp, error) {
	out := new(GuildRecommendInfoResp)
	err := c.cc.Invoke(ctx, "/Guild/RecommendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) GetTaskList(ctx context.Context, in *GuildTaskListReq, opts ...grpc.CallOption) (*GuildTaskListResp, error) {
	out := new(GuildTaskListResp)
	err := c.cc.Invoke(ctx, "/Guild/GetTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) TaskRewards(ctx context.Context, in *GuildTaskRewardsReq, opts ...grpc.CallOption) (*GuildTaskRewardsResp, error) {
	out := new(GuildTaskRewardsResp)
	err := c.cc.Invoke(ctx, "/Guild/TaskRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) TaskAddProgress(ctx context.Context, in *GuildTaskAddProgressReq, opts ...grpc.CallOption) (*GuildTaskAddProgressResp, error) {
	out := new(GuildTaskAddProgressResp)
	err := c.cc.Invoke(ctx, "/Guild/TaskAddProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) SendGroupMail(ctx context.Context, in *GuildSendGroupMailReq, opts ...grpc.CallOption) (*GuildSendGroupMailResp, error) {
	out := new(GuildSendGroupMailResp)
	err := c.cc.Invoke(ctx, "/Guild/SendGroupMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) GetApplyList(ctx context.Context, in *GuildGetApplyListReq, opts ...grpc.CallOption) (*GuildGetApplyListResp, error) {
	out := new(GuildGetApplyListResp)
	err := c.cc.Invoke(ctx, "/Guild/GetApplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildClient) Modify(ctx context.Context, in *GuildModifyReq, opts ...grpc.CallOption) (*GuildModifyResp, error) {
	out := new(GuildModifyResp)
	err := c.cc.Invoke(ctx, "/Guild/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuildServer is the server API for Guild service.
// All implementations must embed UnimplementedGuildServer
// for forward compatibility
type GuildServer interface {
	ShowInfo(context.Context, *GuildShowInfoReq) (*GuildShowInfoResp, error)
	Info(context.Context, *GuildInfoReq) (*GuildInfoResp, error)
	Create(context.Context, *GuildCreateReq) (*GuildCreateResp, error)
	Dissolve(context.Context, *GuildDissolveReq) (*GuildDissolveResp, error)
	CancelDissolve(context.Context, *GuildCancelDissolveReq) (*GuildCancelDissolveResp, error)
	Apply(context.Context, *GuildApplyReq) (*GuildApplyResp, error)
	HandleApplied(context.Context, *GuildHandleAppliedReq) (*GuildHandleAppliedResp, error)
	CancelApply(context.Context, *GuildCancelApplyReq) (*GuildCancelApplyResp, error)
	Quit(context.Context, *GuildQuitReq) (*GuildQuitResp, error)
	Kick(context.Context, *GuildKickReq) (*GuildKickResp, error)
	Chat(context.Context, *GuildChatReq) (*GuildChatResp, error)
	Promotion(context.Context, *GuildPromotionReq) (*GuildPromotionResp, error)
	Demotion(context.Context, *GuildDemotionReq) (*GuildDemotionResp, error)
	Transfer(context.Context, *GuildTransferReq) (*GuildTransferResp, error)
	Recommend(context.Context, *GuildRecommendReq) (*GuildRecommendResp, error)
	IsDissolved(context.Context, *GuildIsDissolvedReq) (*GuildIsDissolvedResp, error)
	Sync(context.Context, *GuildSyncReq) (*GuildSyncResp, error)
	CoBuildGetInfo(context.Context, *GuildCoBuildGetInfoReq) (*GuildCoBuildGetInfoResp, error)
	CoBuildImprove(context.Context, *GuildCoBuildImproveReq) (*GuildCoBuildImproveResp, error)
	CoBuildUse(context.Context, *GuildCoBuildUseReq) (*GuildCoBuildUseResp, error)
	Members(context.Context, *GuildMembersReq) (*GuildMembersResp, error)
	GetDispatchCharac(context.Context, *GuildGetDispatchCharacReq) (*GuildGetDispatchCharacResp, error)
	AddGreetings(context.Context, *GuildAddGreetingsReq) (*GuildAddGreetingsResp, error)
	GetGreetings(context.Context, *GuildGetGreetingsReq) (*GuildGetGreetingsResp, error)
	UpdateGreetingsRecord(context.Context, *GuildUpdateGreetingsReq) (*GuildUpdateGreetingsResp, error)
	GetGraveyardRequests(context.Context, *GuildGetGraveyardRequestsReq) (*GuildGetGraveyardRequestsResp, error)
	AddGraveyardRequest(context.Context, *GuildAddGraveyardRequestReq) (*GuildAddGraveyardRequestResp, error)
	HelpRequestsHandle(context.Context, *GuildHelpRequestsHandleReq) (*GuildHelpRequestsHandleResp, error)
	GetElites(context.Context, *GuildGetElitesReq) (*GuildGetElitesResp, error)
	RecommendInfo(context.Context, *GuildRecommendInfoReq) (*GuildRecommendInfoResp, error)
	GetTaskList(context.Context, *GuildTaskListReq) (*GuildTaskListResp, error)
	TaskRewards(context.Context, *GuildTaskRewardsReq) (*GuildTaskRewardsResp, error)
	TaskAddProgress(context.Context, *GuildTaskAddProgressReq) (*GuildTaskAddProgressResp, error)
	SendGroupMail(context.Context, *GuildSendGroupMailReq) (*GuildSendGroupMailResp, error)
	GetApplyList(context.Context, *GuildGetApplyListReq) (*GuildGetApplyListResp, error)
	Modify(context.Context, *GuildModifyReq) (*GuildModifyResp, error)
	mustEmbedUnimplementedGuildServer()
}

// UnimplementedGuildServer must be embedded to have forward compatible implementations.
type UnimplementedGuildServer struct {
}

func (UnimplementedGuildServer) ShowInfo(context.Context, *GuildShowInfoReq) (*GuildShowInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowInfo not implemented")
}
func (UnimplementedGuildServer) Info(context.Context, *GuildInfoReq) (*GuildInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedGuildServer) Create(context.Context, *GuildCreateReq) (*GuildCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGuildServer) Dissolve(context.Context, *GuildDissolveReq) (*GuildDissolveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dissolve not implemented")
}
func (UnimplementedGuildServer) CancelDissolve(context.Context, *GuildCancelDissolveReq) (*GuildCancelDissolveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDissolve not implemented")
}
func (UnimplementedGuildServer) Apply(context.Context, *GuildApplyReq) (*GuildApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedGuildServer) HandleApplied(context.Context, *GuildHandleAppliedReq) (*GuildHandleAppliedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleApplied not implemented")
}
func (UnimplementedGuildServer) CancelApply(context.Context, *GuildCancelApplyReq) (*GuildCancelApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelApply not implemented")
}
func (UnimplementedGuildServer) Quit(context.Context, *GuildQuitReq) (*GuildQuitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedGuildServer) Kick(context.Context, *GuildKickReq) (*GuildKickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedGuildServer) Chat(context.Context, *GuildChatReq) (*GuildChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedGuildServer) Promotion(context.Context, *GuildPromotionReq) (*GuildPromotionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promotion not implemented")
}
func (UnimplementedGuildServer) Demotion(context.Context, *GuildDemotionReq) (*GuildDemotionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demotion not implemented")
}
func (UnimplementedGuildServer) Transfer(context.Context, *GuildTransferReq) (*GuildTransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedGuildServer) Recommend(context.Context, *GuildRecommendReq) (*GuildRecommendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recommend not implemented")
}
func (UnimplementedGuildServer) IsDissolved(context.Context, *GuildIsDissolvedReq) (*GuildIsDissolvedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDissolved not implemented")
}
func (UnimplementedGuildServer) Sync(context.Context, *GuildSyncReq) (*GuildSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedGuildServer) CoBuildGetInfo(context.Context, *GuildCoBuildGetInfoReq) (*GuildCoBuildGetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoBuildGetInfo not implemented")
}
func (UnimplementedGuildServer) CoBuildImprove(context.Context, *GuildCoBuildImproveReq) (*GuildCoBuildImproveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoBuildImprove not implemented")
}
func (UnimplementedGuildServer) CoBuildUse(context.Context, *GuildCoBuildUseReq) (*GuildCoBuildUseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoBuildUse not implemented")
}
func (UnimplementedGuildServer) Members(context.Context, *GuildMembersReq) (*GuildMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedGuildServer) GetDispatchCharac(context.Context, *GuildGetDispatchCharacReq) (*GuildGetDispatchCharacResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDispatchCharac not implemented")
}
func (UnimplementedGuildServer) AddGreetings(context.Context, *GuildAddGreetingsReq) (*GuildAddGreetingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGreetings not implemented")
}
func (UnimplementedGuildServer) GetGreetings(context.Context, *GuildGetGreetingsReq) (*GuildGetGreetingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreetings not implemented")
}
func (UnimplementedGuildServer) UpdateGreetingsRecord(context.Context, *GuildUpdateGreetingsReq) (*GuildUpdateGreetingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreetingsRecord not implemented")
}
func (UnimplementedGuildServer) GetGraveyardRequests(context.Context, *GuildGetGraveyardRequestsReq) (*GuildGetGraveyardRequestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraveyardRequests not implemented")
}
func (UnimplementedGuildServer) AddGraveyardRequest(context.Context, *GuildAddGraveyardRequestReq) (*GuildAddGraveyardRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGraveyardRequest not implemented")
}
func (UnimplementedGuildServer) HelpRequestsHandle(context.Context, *GuildHelpRequestsHandleReq) (*GuildHelpRequestsHandleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpRequestsHandle not implemented")
}
func (UnimplementedGuildServer) GetElites(context.Context, *GuildGetElitesReq) (*GuildGetElitesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElites not implemented")
}
func (UnimplementedGuildServer) RecommendInfo(context.Context, *GuildRecommendInfoReq) (*GuildRecommendInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendInfo not implemented")
}
func (UnimplementedGuildServer) GetTaskList(context.Context, *GuildTaskListReq) (*GuildTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedGuildServer) TaskRewards(context.Context, *GuildTaskRewardsReq) (*GuildTaskRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskRewards not implemented")
}
func (UnimplementedGuildServer) TaskAddProgress(context.Context, *GuildTaskAddProgressReq) (*GuildTaskAddProgressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAddProgress not implemented")
}
func (UnimplementedGuildServer) SendGroupMail(context.Context, *GuildSendGroupMailReq) (*GuildSendGroupMailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMail not implemented")
}
func (UnimplementedGuildServer) GetApplyList(context.Context, *GuildGetApplyListReq) (*GuildGetApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplyList not implemented")
}
func (UnimplementedGuildServer) Modify(context.Context, *GuildModifyReq) (*GuildModifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedGuildServer) mustEmbedUnimplementedGuildServer() {}

// UnsafeGuildServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuildServer will
// result in compilation errors.
type UnsafeGuildServer interface {
	mustEmbedUnimplementedGuildServer()
}

func RegisterGuildServer(s grpc.ServiceRegistrar, srv GuildServer) {
	s.RegisterService(&Guild_ServiceDesc, srv)
}

func _Guild_ShowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildShowInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).ShowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/ShowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).ShowInfo(ctx, req.(*GuildShowInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Info(ctx, req.(*GuildInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Create(ctx, req.(*GuildCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Dissolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildDissolveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Dissolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Dissolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Dissolve(ctx, req.(*GuildDissolveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_CancelDissolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCancelDissolveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).CancelDissolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/CancelDissolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).CancelDissolve(ctx, req.(*GuildCancelDissolveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Apply(ctx, req.(*GuildApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_HandleApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildHandleAppliedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).HandleApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/HandleApplied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).HandleApplied(ctx, req.(*GuildHandleAppliedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_CancelApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCancelApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).CancelApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/CancelApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).CancelApply(ctx, req.(*GuildCancelApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildQuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Quit(ctx, req.(*GuildQuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildKickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Kick(ctx, req.(*GuildKickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Chat(ctx, req.(*GuildChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Promotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildPromotionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Promotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Promotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Promotion(ctx, req.(*GuildPromotionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Demotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildDemotionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Demotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Demotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Demotion(ctx, req.(*GuildDemotionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Transfer(ctx, req.(*GuildTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Recommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Recommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Recommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Recommend(ctx, req.(*GuildRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_IsDissolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildIsDissolvedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).IsDissolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/IsDissolved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).IsDissolved(ctx, req.(*GuildIsDissolvedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Sync(ctx, req.(*GuildSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_CoBuildGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCoBuildGetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).CoBuildGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/CoBuildGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).CoBuildGetInfo(ctx, req.(*GuildCoBuildGetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_CoBuildImprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCoBuildImproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).CoBuildImprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/CoBuildImprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).CoBuildImprove(ctx, req.(*GuildCoBuildImproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_CoBuildUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildCoBuildUseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).CoBuildUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/CoBuildUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).CoBuildUse(ctx, req.(*GuildCoBuildUseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Members(ctx, req.(*GuildMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_GetDispatchCharac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildGetDispatchCharacReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).GetDispatchCharac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/GetDispatchCharac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).GetDispatchCharac(ctx, req.(*GuildGetDispatchCharacReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_AddGreetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildAddGreetingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).AddGreetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/AddGreetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).AddGreetings(ctx, req.(*GuildAddGreetingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_GetGreetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildGetGreetingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).GetGreetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/GetGreetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).GetGreetings(ctx, req.(*GuildGetGreetingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_UpdateGreetingsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildUpdateGreetingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).UpdateGreetingsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/UpdateGreetingsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).UpdateGreetingsRecord(ctx, req.(*GuildUpdateGreetingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_GetGraveyardRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildGetGraveyardRequestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).GetGraveyardRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/GetGraveyardRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).GetGraveyardRequests(ctx, req.(*GuildGetGraveyardRequestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_AddGraveyardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildAddGraveyardRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).AddGraveyardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/AddGraveyardRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).AddGraveyardRequest(ctx, req.(*GuildAddGraveyardRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_HelpRequestsHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildHelpRequestsHandleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).HelpRequestsHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/HelpRequestsHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).HelpRequestsHandle(ctx, req.(*GuildHelpRequestsHandleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_GetElites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildGetElitesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).GetElites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/GetElites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).GetElites(ctx, req.(*GuildGetElitesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_RecommendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildRecommendInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).RecommendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/RecommendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).RecommendInfo(ctx, req.(*GuildRecommendInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).GetTaskList(ctx, req.(*GuildTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_TaskRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTaskRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).TaskRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/TaskRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).TaskRewards(ctx, req.(*GuildTaskRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_TaskAddProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildTaskAddProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).TaskAddProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/TaskAddProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).TaskAddProgress(ctx, req.(*GuildTaskAddProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_SendGroupMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildSendGroupMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).SendGroupMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/SendGroupMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).SendGroupMail(ctx, req.(*GuildSendGroupMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_GetApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildGetApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).GetApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/GetApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).GetApplyList(ctx, req.(*GuildGetApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guild_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuildModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Guild/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServer).Modify(ctx, req.(*GuildModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Guild_ServiceDesc is the grpc.ServiceDesc for Guild service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Guild_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Guild",
	HandlerType: (*GuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowInfo",
			Handler:    _Guild_ShowInfo_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Guild_Info_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Guild_Create_Handler,
		},
		{
			MethodName: "Dissolve",
			Handler:    _Guild_Dissolve_Handler,
		},
		{
			MethodName: "CancelDissolve",
			Handler:    _Guild_CancelDissolve_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Guild_Apply_Handler,
		},
		{
			MethodName: "HandleApplied",
			Handler:    _Guild_HandleApplied_Handler,
		},
		{
			MethodName: "CancelApply",
			Handler:    _Guild_CancelApply_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Guild_Quit_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _Guild_Kick_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _Guild_Chat_Handler,
		},
		{
			MethodName: "Promotion",
			Handler:    _Guild_Promotion_Handler,
		},
		{
			MethodName: "Demotion",
			Handler:    _Guild_Demotion_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Guild_Transfer_Handler,
		},
		{
			MethodName: "Recommend",
			Handler:    _Guild_Recommend_Handler,
		},
		{
			MethodName: "IsDissolved",
			Handler:    _Guild_IsDissolved_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Guild_Sync_Handler,
		},
		{
			MethodName: "CoBuildGetInfo",
			Handler:    _Guild_CoBuildGetInfo_Handler,
		},
		{
			MethodName: "CoBuildImprove",
			Handler:    _Guild_CoBuildImprove_Handler,
		},
		{
			MethodName: "CoBuildUse",
			Handler:    _Guild_CoBuildUse_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Guild_Members_Handler,
		},
		{
			MethodName: "GetDispatchCharac",
			Handler:    _Guild_GetDispatchCharac_Handler,
		},
		{
			MethodName: "AddGreetings",
			Handler:    _Guild_AddGreetings_Handler,
		},
		{
			MethodName: "GetGreetings",
			Handler:    _Guild_GetGreetings_Handler,
		},
		{
			MethodName: "UpdateGreetingsRecord",
			Handler:    _Guild_UpdateGreetingsRecord_Handler,
		},
		{
			MethodName: "GetGraveyardRequests",
			Handler:    _Guild_GetGraveyardRequests_Handler,
		},
		{
			MethodName: "AddGraveyardRequest",
			Handler:    _Guild_AddGraveyardRequest_Handler,
		},
		{
			MethodName: "HelpRequestsHandle",
			Handler:    _Guild_HelpRequestsHandle_Handler,
		},
		{
			MethodName: "GetElites",
			Handler:    _Guild_GetElites_Handler,
		},
		{
			MethodName: "RecommendInfo",
			Handler:    _Guild_RecommendInfo_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _Guild_GetTaskList_Handler,
		},
		{
			MethodName: "TaskRewards",
			Handler:    _Guild_TaskRewards_Handler,
		},
		{
			MethodName: "TaskAddProgress",
			Handler:    _Guild_TaskAddProgress_Handler,
		},
		{
			MethodName: "SendGroupMail",
			Handler:    _Guild_SendGroupMail_Handler,
		},
		{
			MethodName: "GetApplyList",
			Handler:    _Guild_GetApplyList_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _Guild_Modify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/protobuf/proto/guild.proto",
}
