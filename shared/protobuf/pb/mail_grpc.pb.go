// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailClient is the client API for Mail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailClient interface {
	Fetch(ctx context.Context, in *MailFetchReq, opts ...grpc.CallOption) (*MailFetchResp, error)
	SendWholeServerMail(ctx context.Context, in *SendWholeServerMailReq, opts ...grpc.CallOption) (*SendWholeServerMailResp, error)
	SendGroupMail(ctx context.Context, in *SendGroupMailReq, opts ...grpc.CallOption) (*SendGroupMailResp, error)
	SendPersonalMail(ctx context.Context, in *SendPersonalMailReq, opts ...grpc.CallOption) (*SendPersonalMailResp, error)
}

type mailClient struct {
	cc grpc.ClientConnInterface
}

func NewMailClient(cc grpc.ClientConnInterface) MailClient {
	return &mailClient{cc}
}

func (c *mailClient) Fetch(ctx context.Context, in *MailFetchReq, opts ...grpc.CallOption) (*MailFetchResp, error) {
	out := new(MailFetchResp)
	err := c.cc.Invoke(ctx, "/Mail/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) SendWholeServerMail(ctx context.Context, in *SendWholeServerMailReq, opts ...grpc.CallOption) (*SendWholeServerMailResp, error) {
	out := new(SendWholeServerMailResp)
	err := c.cc.Invoke(ctx, "/Mail/SendWholeServerMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) SendGroupMail(ctx context.Context, in *SendGroupMailReq, opts ...grpc.CallOption) (*SendGroupMailResp, error) {
	out := new(SendGroupMailResp)
	err := c.cc.Invoke(ctx, "/Mail/SendGroupMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) SendPersonalMail(ctx context.Context, in *SendPersonalMailReq, opts ...grpc.CallOption) (*SendPersonalMailResp, error) {
	out := new(SendPersonalMailResp)
	err := c.cc.Invoke(ctx, "/Mail/SendPersonalMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailServer is the server API for Mail service.
// All implementations must embed UnimplementedMailServer
// for forward compatibility
type MailServer interface {
	Fetch(context.Context, *MailFetchReq) (*MailFetchResp, error)
	SendWholeServerMail(context.Context, *SendWholeServerMailReq) (*SendWholeServerMailResp, error)
	SendGroupMail(context.Context, *SendGroupMailReq) (*SendGroupMailResp, error)
	SendPersonalMail(context.Context, *SendPersonalMailReq) (*SendPersonalMailResp, error)
	mustEmbedUnimplementedMailServer()
}

// UnimplementedMailServer must be embedded to have forward compatible implementations.
type UnimplementedMailServer struct {
}

func (UnimplementedMailServer) Fetch(context.Context, *MailFetchReq) (*MailFetchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedMailServer) SendWholeServerMail(context.Context, *SendWholeServerMailReq) (*SendWholeServerMailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWholeServerMail not implemented")
}
func (UnimplementedMailServer) SendGroupMail(context.Context, *SendGroupMailReq) (*SendGroupMailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMail not implemented")
}
func (UnimplementedMailServer) SendPersonalMail(context.Context, *SendPersonalMailReq) (*SendPersonalMailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPersonalMail not implemented")
}
func (UnimplementedMailServer) mustEmbedUnimplementedMailServer() {}

// UnsafeMailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailServer will
// result in compilation errors.
type UnsafeMailServer interface {
	mustEmbedUnimplementedMailServer()
}

func RegisterMailServer(s grpc.ServiceRegistrar, srv MailServer) {
	s.RegisterService(&Mail_ServiceDesc, srv)
}

func _Mail_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailFetchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mail/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).Fetch(ctx, req.(*MailFetchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_SendWholeServerMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWholeServerMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).SendWholeServerMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mail/SendWholeServerMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).SendWholeServerMail(ctx, req.(*SendWholeServerMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_SendGroupMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).SendGroupMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mail/SendGroupMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).SendGroupMail(ctx, req.(*SendGroupMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_SendPersonalMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPersonalMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).SendPersonalMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mail/SendPersonalMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).SendPersonalMail(ctx, req.(*SendPersonalMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mail_ServiceDesc is the grpc.ServiceDesc for Mail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mail",
	HandlerType: (*MailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Mail_Fetch_Handler,
		},
		{
			MethodName: "SendWholeServerMail",
			Handler:    _Mail_SendWholeServerMail_Handler,
		},
		{
			MethodName: "SendGroupMail",
			Handler:    _Mail_SendGroupMail_Handler,
		},
		{
			MethodName: "SendPersonalMail",
			Handler:    _Mail_SendPersonalMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/protobuf/proto/mail.proto",
}
