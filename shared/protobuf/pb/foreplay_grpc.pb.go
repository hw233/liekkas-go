// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForeplayClient is the client API for Foreplay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForeplayClient interface {
	ReloadAnnouncement(ctx context.Context, in *ReloadAnnouncementReq, opts ...grpc.CallOption) (*ReloadAnnouncementResp, error)
	ReloadMaintain(ctx context.Context, in *ReloadMaintainReq, opts ...grpc.CallOption) (*ReloadMaintainResp, error)
}

type foreplayClient struct {
	cc grpc.ClientConnInterface
}

func NewForeplayClient(cc grpc.ClientConnInterface) ForeplayClient {
	return &foreplayClient{cc}
}

func (c *foreplayClient) ReloadAnnouncement(ctx context.Context, in *ReloadAnnouncementReq, opts ...grpc.CallOption) (*ReloadAnnouncementResp, error) {
	out := new(ReloadAnnouncementResp)
	err := c.cc.Invoke(ctx, "/Foreplay/ReloadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foreplayClient) ReloadMaintain(ctx context.Context, in *ReloadMaintainReq, opts ...grpc.CallOption) (*ReloadMaintainResp, error) {
	out := new(ReloadMaintainResp)
	err := c.cc.Invoke(ctx, "/Foreplay/ReloadMaintain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForeplayServer is the server API for Foreplay service.
// All implementations must embed UnimplementedForeplayServer
// for forward compatibility
type ForeplayServer interface {
	ReloadAnnouncement(context.Context, *ReloadAnnouncementReq) (*ReloadAnnouncementResp, error)
	ReloadMaintain(context.Context, *ReloadMaintainReq) (*ReloadMaintainResp, error)
	mustEmbedUnimplementedForeplayServer()
}

// UnimplementedForeplayServer must be embedded to have forward compatible implementations.
type UnimplementedForeplayServer struct {
}

func (UnimplementedForeplayServer) ReloadAnnouncement(context.Context, *ReloadAnnouncementReq) (*ReloadAnnouncementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAnnouncement not implemented")
}
func (UnimplementedForeplayServer) ReloadMaintain(context.Context, *ReloadMaintainReq) (*ReloadMaintainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadMaintain not implemented")
}
func (UnimplementedForeplayServer) mustEmbedUnimplementedForeplayServer() {}

// UnsafeForeplayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForeplayServer will
// result in compilation errors.
type UnsafeForeplayServer interface {
	mustEmbedUnimplementedForeplayServer()
}

func RegisterForeplayServer(s grpc.ServiceRegistrar, srv ForeplayServer) {
	s.RegisterService(&Foreplay_ServiceDesc, srv)
}

func _Foreplay_ReloadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadAnnouncementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForeplayServer).ReloadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Foreplay/ReloadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForeplayServer).ReloadAnnouncement(ctx, req.(*ReloadAnnouncementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foreplay_ReloadMaintain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadMaintainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForeplayServer).ReloadMaintain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Foreplay/ReloadMaintain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForeplayServer).ReloadMaintain(ctx, req.(*ReloadMaintainReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Foreplay_ServiceDesc is the grpc.ServiceDesc for Foreplay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Foreplay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Foreplay",
	HandlerType: (*ForeplayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReloadAnnouncement",
			Handler:    _Foreplay_ReloadAnnouncement_Handler,
		},
		{
			MethodName: "ReloadMaintain",
			Handler:    _Foreplay_ReloadMaintain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/protobuf/proto/foreplay.proto",
}
