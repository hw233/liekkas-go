// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PureClient is the client API for Pure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PureClient interface {
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanReply, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterReply, error)
}

type pureClient struct {
	cc grpc.ClientConnInterface
}

func NewPureClient(cc grpc.ClientConnInterface) PureClient {
	return &pureClient{cc}
}

func (c *pureClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanReply, error) {
	out := new(ScanReply)
	err := c.cc.Invoke(ctx, "/Pure/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pureClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterReply, error) {
	out := new(FilterReply)
	err := c.cc.Invoke(ctx, "/Pure/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PureServer is the server API for Pure service.
// All implementations must embed UnimplementedPureServer
// for forward compatibility
type PureServer interface {
	Scan(context.Context, *ScanRequest) (*ScanReply, error)
	Filter(context.Context, *FilterRequest) (*FilterReply, error)
	mustEmbedUnimplementedPureServer()
}

// UnimplementedPureServer must be embedded to have forward compatible implementations.
type UnimplementedPureServer struct {
}

func (UnimplementedPureServer) Scan(context.Context, *ScanRequest) (*ScanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedPureServer) Filter(context.Context, *FilterRequest) (*FilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedPureServer) mustEmbedUnimplementedPureServer() {}

// UnsafePureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PureServer will
// result in compilation errors.
type UnsafePureServer interface {
	mustEmbedUnimplementedPureServer()
}

func RegisterPureServer(s grpc.ServiceRegistrar, srv PureServer) {
	s.RegisterService(&Pure_ServiceDesc, srv)
}

func _Pure_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PureServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pure/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PureServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pure_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PureServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pure/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PureServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pure_ServiceDesc is the grpc.ServiceDesc for Pure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Pure",
	HandlerType: (*PureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _Pure_Scan_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _Pure_Filter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pure.proto",
}
